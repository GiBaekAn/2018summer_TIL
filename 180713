// 소켓 통신
// 구조체 전달방식
// (미완성)
// 전달 방식에 차이점이 발생하여 다음주에 마저 디버깅을 진행할 예정



//
//  Server.cpp
//  Socket_chatting
//
//  Created by  MacBook on 2018. 7. 9..
//  Copyright © 2018년  MacBook. All rights reserved.
//

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/socket.h>

#define  BUFF_SIZE  20480

struct socketStruct {
    char num;
    char temp[105];
};

int   main( void)
{
    int   server_socket;
    int   client_socket;
    int   client_addr_size;
    int   nSockOpt;
    
    struct sockaddr_in   server_addr;
    struct sockaddr_in   client_addr;
    
    // char   buff_rcv[BUFF_SIZE+5];
    // char   buff_snd[BUFF_SIZE+5];
    
    socketStruct tempdata;
    socketStruct senddata;
    
    server_socket  = socket( PF_INET, SOCK_STREAM, 0); // 소켓 디스크립터
    
    if( -1 == server_socket)
    {
        printf( "서버 : server socket 생성 실패\n");
        exit( 1);
    }
    // 서버 소켓 생성
    //
    
    //소켓에 주소와 port를 할당하기 위하여 sockaddr_in 구조체 사용
    memset( &server_addr, 0, sizeof( server_addr));
    server_addr.sin_family     = AF_INET;               //IPv4
    server_addr.sin_port       = htons(4000);
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);   //32bit IPv4 주소
    // INADDR_ANY :  시스템 마다 IP가 다르므로 IP를 고정하지 않고 어떠한 IP도 허용
    
    nSockOpt = 1;
    setsockopt(server_socket, SOL_SOCKET, SO_REUSEADDR, (const char*)&nSockOpt, sizeof(nSockOpt));
    // 옵션 설정을 통하여 서버의 재사용을 가능하게 만든다
    
    
    if( -1 == bind( server_socket, (struct sockaddr*)&server_addr, sizeof( server_addr) ) )
    {
        printf( "서버 : bind() 실행 에러\n");
        exit( 1);
    }
    // 서버 소켓에 필요한 정보를 할당
    //
    
    
    if( -1 == listen(server_socket, 5))
    {
        printf( "서버 : listen() 실행 실패\n");
        exit( 1);
    }
    // 접속 요청 확인
    //
    
    
    while( 1)
    {
        client_addr_size  = sizeof( client_addr);
        client_socket     = accept( server_socket, (struct sockaddr*)&client_addr, (socklen_t*)&client_addr_size);
        // accept를 통하여 클라이언트의 접속 허용, 클라이언트 소켓 생성
        
        if ( -1 == client_socket)
        {
            printf( "서버 : 클라이언트 연결 수락 실패\n");
            exit( 1);
        }
        
        memset(&tempdata.temp, 0, sizeof(tempdata.temp));
        read (client_socket,&tempdata,BUFF_SIZE);
        
        // 클라이언트로 부터 자료를 읽어들임
        
        
        for(int i =0;i<tempdata.num;i++){
            printf( "서버 received: %s\n" ,tempdata.temp);
        }
        
        sprintf( senddata.temp, "%zu : %s\n", strlen( tempdata.temp), tempdata.temp);   // 수신된 길이를 구하여 전송할 데이터 준비
        
        //write( client_socket, senddata.temp, (strlen( senddata.temp)+1) );          // +1: NULL까지 포함해서 전송
        
        
        close( client_socket);
        // 클라이언트 소켓을 소멸시켜 통신 종료
    }
}


//
//  Client.cpp
//  Socket_chatting
//
//  Created by  MacBook on 2018. 7. 9..
//  Copyright © 2018년  MacBook. All rights reserved.
//

#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/socket.h>

#define  BUFF_SIZE   20480

struct socketStruct {
    char num;
    char temp[105];
};

int   main( int argc, char **argv)
{
    
    int   client_socket;
    int   pnum;
    char  addr[20];
    char   limit;
    int   count;
    int   n;
    int   flag;
    char  again;
    char  input[105];
    
    
    struct sockaddr_in   server_addr;
    
    //char   buff[BUFF_SIZE+5];
    
    socketStruct tempdata;
    socketStruct getdata;
    
  //  printf("클라이언트 : 포트 번호를 입력해주세요\n");
  //  scanf("%d",&pnum);
  //  printf("클라이언트 : IP 주소를 입력해주세요 (self : 127.0.0.1)\n");
  //  scanf("%s",addr);
    pnum = 4000;
    strcpy(addr, "127.0.0.1");
    
    do{
        strcpy(input, " ");
        limit = 0;
        count = 0;
        again = 'n';
        n = 0;
        flag = 0;
        tempdata.num = 0;
        getdata.num =0;
        memset(&tempdata.temp, 0, sizeof(tempdata.temp));
        memset(&getdata.temp, 0, sizeof(getdata.temp));
        
        client_socket  = socket( PF_INET, SOCK_STREAM, 0);
        if( -1 == client_socket)
        {
            printf( "클라이언트 : socket 생성 실패\n");
            exit( 1);
        }
        // 클라이언트 소켓 생성
        //
        memset( &server_addr, 0, sizeof( server_addr));
        server_addr.sin_family     = AF_INET;
        server_addr.sin_port       = htons( pnum);
        server_addr.sin_addr.s_addr= inet_addr( addr);
        // 만들어진 소켓에 정보 할당
        
        if( -1 == connect( client_socket, (struct sockaddr*)&server_addr, sizeof( server_addr) ) )
        {
            printf( "클라이언트 : 접속 실패\n");
            exit( 1);
        }
        // 서버로의 접속을 시도
        
        fflush(stdin);
        printf("\n 보내고 싶은 횟수를 입력해주세요 (범위 : 1~20) (종료를 원한다면 99)\n");
        scanf("%hhd",&limit);
        
        while(1){
            while(getchar()!='\n'){
                fflush(stdin);
                count ++;
            }
            if(limit>0&&limit<21&&count==0){
                tempdata.num = limit;
                break;
            }
            if(limit==99){
                strcpy(input, "QUIT");
                break;
            }
            count = 0;
            printf("!ERROR!   1부터 20까지만 입력 가능합니다.\n          올바른 입력값을 입력해주세요.\n");
            printf("\n 보내고 싶은 횟수를 입력해주세요 (범위 : 1~20) (종료를 원한다면 99)\n");
            scanf("%hhd",&limit);
            
        }
        
        if(limit>0&&limit<21&&count==0){
            
            fflush(stdin);
            printf(" 보내고 싶은 문자열을 입력해주세요 (최대크기는 100) (종료를 원한다면 QUIT)\n");
            
            char tc;
            do{
                scanf("%c",&input[n]);
                tc = input[n];
                n++;
                if(n>99){
                    input[n]='\0';
                    n--;
                    flag = 1;
                }
            }while(tc!='\n');
            input[n-1] = '\0';
            
            if(flag){
                printf("최대 크기를 초과하였습니다. 초과한 부분은 잘려져 전송됩니다.\n");
            }
            
            //scanf("%s",input);
            
            
            if(strcmp(input, "QUIT")){
                
                strncpy(tempdata.temp, input,n);
                
                
                write( client_socket, &tempdata, (strlen(tempdata.temp)+1)*tempdata.num);
                
                // +1: NULL까지 포함해서 전송
                //read ( client_socket, &getdata.temp,BUFF_SIZE);
                
                //printf("Socket PID : %d\n",client_socket);
                // 접속에 성공할 경우 데이터 전송
                
                // 자료 수신 및 출력
                //printf( " 클라이언트 : %s\n", getdata.temp);
                
            }//문자열이 QUIT가 아님
            
            
        }//횟수 20범위 이내
        else{
            limit = 0;
        }
        
    }while(strcmp(input, "QUIT"));
    
    
    tempdata.num =0;
    write(client_socket, &tempdata.num, 1);
    
    printf("\n== 통신을 종료합니다 ==\n");
    close( client_socket);
    return 0;
    
    
  
}
