//  디버깅 완료
//  버튼 수정
//  Server에서 데이터를 받았을 때 창의 크기를 넘어갈 경우
//  Y축이 넘어갈 경우 : Y초기화, X값은 데이터에따라 동적으로 변경
//  X축이 넘어갈 경우 : 모두 초기화
//
////////////////////////////////////////////////////////////////////////////////////
//
//
//


/*
Program Name     : Client - Socket GUI communication (use winapi)
Programmer Name  : Gi Baek An
Programming Date : 2018-07-02 ~ 07-27
*/

#if defined(UNICODE) && !defined(_UNICODE)
    #define _UNICODE
#elif defined(_UNICODE) && !defined(UNICODE)
    #define UNICODE
#endif

#include <tchar.h>
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <process.h>
#include <winsock.h>
#include <winsock2.h>
#include <commctrl.h>
#pragma comment(lib,"ws2_32.lib")
#define BUFSIZE 1024
#define IPSIZE 20
#define PORTSIZE 10

/*  Declare Windows procedure  */
LRESULT CALLBACK WindowProcedure (HWND, UINT, WPARAM, LPARAM);

/*  Make the class name into a global variable  */
TCHAR szClassName[ ] = _T("CodeBlocksWindowsApp");

HINSTANCE hInst;
HWND h_main,c1,c2,c3,c4,c5,c6,c7,c8,c9,s1,s2,s3,s4,s5,r1,r2,r3,r4,test;
char str[BUFSIZE], ip_static[IPSIZE], c_pnum[PORTSIZE];
char c_addr[IPSIZE] = "192.168.73.83";
char *myip;
char buff[BUFSIZE] ={0,};
int  x, y, max_x, client_socket, szClntAddr, strLen, error, click, i, clntNum;
HDC hdc;
WSADATA wsaData;
SOCKET hServSock, hClntSock, clntSock, servSock, clntSocks[1000];
SOCKADDR_IN servAddr, clntAddr;
HANDLE hMutex;

void client(int get_pnum,char *get_addr,char *get_msg){
    int     pnum;
    char    addr[IPSIZE];
    char    senddata[BUFSIZE];
    struct sockaddr_in   server_addr;

    pnum = get_pnum;
    strcpy (addr,get_addr);
    memset( &server_addr, 0, sizeof( server_addr));
    server_addr.sin_family     = AF_INET;
    server_addr.sin_port       = htons( pnum);
    server_addr.sin_addr.s_addr= inet_addr( addr);
    // Allocate Information to made socket

    strcpy(senddata, "");
    // variable initialization
    client_socket  = socket( PF_INET, SOCK_STREAM, 0);
    if( -1 == client_socket)
    {
        printf( "Client : socket() make error! \n");
        MessageBox(h_main,"socket() make error!!","ERROR",MB_OK);
        error = 1;
    }
    // make Client Socket
    if( -1 == connect( client_socket, (struct sockaddr*)&server_addr, sizeof( server_addr) ) )
    {
        printf( "Client : Connect() error! \n");
        MessageBox(h_main,"Connect() error!!","ERROR",MB_OK);
        error = 1;
    }
    // Try to Connect() SERVER
    strcpy(senddata, get_msg);
    if(error==0){printf("  Client : %s\n",senddata);}
    send(client_socket, senddata, (strlen(senddata)+1),0);
    client_socket  = socket( PF_INET, SOCK_STREAM, 0);
}

void OnReceive(void * arg){
    SOCKET clntSock = (SOCKET)arg;
    int strLen = 0;
    char message[BUFSIZE] = {0,};
    while(((strLen=recv(clntSock,message,BUFSIZE,0))>0)&&(strcmp("",message))){
        HDC hdc;
        hdc = GetDC(h_main);
        if(y==680){
                x = max_x;
                y = 80;
                max_x = 0;
        }
        if(x>1600){
            InvalidateRect(h_main,NULL,TRUE);
            x = 200;
            y = 80;
        }
        TextOut(hdc,x,y,ip_static,strlen(ip_static));
        TextOut(hdc,x+(strlen(ip_static)*8),y," : ",3);
        TextOut(hdc,x+(strlen(ip_static)*10),y,message,strlen(message));
        ReleaseDC(h_main,hdc);
        y +=20;
        max_x = max(x + (strlen(ip_static))*10 + (strlen(message))*10 + 10 , max_x);
        message[strLen]=0;
    }
    WaitForSingleObject(hMutex,INFINITE);
    for(int k=0;k<clntNum;k++){
        if(clntNum == clntSocks[k]){
            for(;k<clntNum-1;k++)
                clntSocks[k] = clntSocks[i+1];
            break;
        }
    }
    clntNum--;
    ReleaseMutex(hMutex);
    closesocket(clntSock);
}

void OnAccept(void * vp){
    while(click==2){
        SOCKADDR_IN clntAddr;
        int clntAddrSize = sizeof(clntAddr);
        clntSock = accept(hServSock,(SOCKADDR*)&clntAddr,&clntAddrSize);
        if(clntSock==INVALID_SOCKET){ // accept error!
            _sleep(1000);
        }
        strcpy(ip_static,inet_ntoa(clntAddr.sin_addr));
        WaitForSingleObject(hMutex,INFINITE);
        clntSocks[clntNum++]=clntSock;
        ReleaseMutex(hMutex);
        _beginthread(OnReceive,0,(void*)clntSock);
    }
}
void persec(void * vp){
    char senddata[BUFSIZE];
    while(click==3&&error==0){
        struct sockaddr_in   server_addr;

        memset( &server_addr, 0, sizeof( server_addr));
        server_addr.sin_family     = AF_INET;
        server_addr.sin_port       = htons( atoi(c_pnum));
        server_addr.sin_addr.s_addr= inet_addr( c_addr);

        strcpy(senddata, "");
        client_socket  = socket( PF_INET, SOCK_STREAM, 0);
        if( -1 == client_socket)
        {
            printf( "Client : socket() make error! \n");
            MessageBox(h_main,"socket() make error!!","ERROR",MB_OK);
            error = 1;
            ShowWindow(c9,SW_HIDE);
            ShowWindow(c8,SW_SHOW);
        }
        if( -1 == connect( client_socket, (struct sockaddr*)&server_addr, sizeof( server_addr) ) )
        {
            printf( "Client : Connect() error! \n");
            MessageBox(h_main,"Connect() error!!","ERROR",MB_OK);
            error = 1;
            ShowWindow(c9,SW_HIDE);
            ShowWindow(c8,SW_SHOW);
        }
        WaitForSingleObject(hMutex,INFINITE);
        strcpy(senddata, str);
        if(error==0){ printf("  Client : %s\n",senddata);}
        send(client_socket, senddata, (strlen(senddata)+1),0);
        _sleep(1000);
        client_socket  = socket( PF_INET, SOCK_STREAM, 0);
        closesocket(clntSock);
        ReleaseMutex(hMutex);
    }
}

void getIPaddr(){  // Get IP address of my computer
    WORD w;
    WSADATA wsa;
    char name[255];
    PHOSTENT host;
    w = MAKEWORD(2,0);
    if(WSAStartup(w,&wsa)==0){
        if(gethostname(name,sizeof(name))==0){
            if((host=gethostbyname(name))!=NULL){
                myip = inet_ntoa(*(struct in_addr*)*host->h_addr_list);
            }
        }
    }
}

int WINAPI WinMain (HINSTANCE hThisInstance,
                     HINSTANCE hPrevInstance,
                     LPSTR lpszArgument,
                     int nCmdShow)
{
    //HWND hwnd;               /* This is the handle for our window */
    MSG messages;            /* Here messages to the application are saved */
    WNDCLASSEX wincl;        /* Data structure for the windowclass */

    /* The Window structure */
    wincl.hInstance = hThisInstance;
    wincl.lpszClassName = szClassName;
    wincl.lpfnWndProc = WindowProcedure;      /* This function is called by windows */
    wincl.style = CS_DBLCLKS;                 /* Catch double-clicks */
    wincl.cbSize = sizeof (WNDCLASSEX);

    /* Use default icon and mouse-pointer */
    wincl.hIcon = LoadIcon (NULL, IDI_APPLICATION);
    wincl.hIconSm = LoadIcon (NULL, IDI_APPLICATION);
    wincl.hCursor = LoadCursor (NULL, IDC_ARROW);
    wincl.lpszMenuName = NULL;                 /* No menu */
    wincl.cbClsExtra = 0;                      /* No extra bytes after the window class */
    wincl.cbWndExtra = 0;                      /* structure or the window instance */
    /* Use Windows's default colour as the background of the window */
    wincl.hbrBackground = (HBRUSH) COLOR_BACKGROUND;

    /* Register the window class, and if it fails quit the program */
    if (!RegisterClassEx (&wincl))
        return 0;

    /* The class is registered, let's create the program*/
    h_main = CreateWindowEx (
           0,                   /* Extended possibilites for variation */
           szClassName,         /* Classname */
           _T("Code::Blocks Template Windows App :: CLIENT - SERVER (using WINAPI)"),       /* Title Text */
           WS_OVERLAPPEDWINDOW, /* default window */
           CW_USEDEFAULT,       /* Windows decides the position */
           CW_USEDEFAULT,       /* where the window ends up on the screen */
           1600,                 /* The programs width */
           800,                 /* and height in pixels */
           HWND_DESKTOP,        /* The window is a child-window to desktop */
           NULL,                /* No menu */
           hThisInstance,       /* Program Instance handler */
           NULL                 /* No Window Creation data */
           );
            getIPaddr();
            CreateWindow("button",TEXT("MODE"),WS_CHILD|WS_VISIBLE|BS_GROUPBOX,20,20,100,120,h_main,(HMENU)0,hInst,NULL);
            r1 = CreateWindow("button","NONE",WS_CHILD|WS_VISIBLE|BS_AUTORADIOBUTTON|WS_GROUP,30,50,70,25,h_main,(HMENU)1,hInst,NULL);
            r2 = CreateWindow("button","SERVER",WS_CHILD|WS_VISIBLE|BS_AUTORADIOBUTTON,30,80,75,25,h_main,(HMENU)2,hInst,NULL);
            r3 = CreateWindow("button","CLIENT",WS_CHILD|WS_VISIBLE|BS_AUTORADIOBUTTON,30,110,70,25,h_main,(HMENU)3,hInst,NULL);
            CheckRadioButton(h_main,1,3,1);
            r4 = CreateWindow("button","QUIT",WS_CHILD|WS_VISIBLE|BS_PUSHBUTTON,20,150,100,50,h_main,(HMENU)11,hInst,NULL);

    /* Make the window visible on the screen */
    ShowWindow (h_main, nCmdShow);
    /* Run the message loop. It will run until GetMessage() returns 0 */
    while (GetMessage (&messages, NULL, 0, 0))
    {
        /* Translate virtual-key messages into character messages */
        TranslateMessage(&messages);
        /* Send message to WindowProcedure */
        DispatchMessage(&messages);
    }
    /* The program return-value is 0 - The value that PostQuitMessage() gave */
    return messages.wParam;
}


/*  This function is called by the Windows function DispatchMessage()  */

LRESULT CALLBACK WindowProcedure (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    hdc = GetDC(h_main);
    switch (message)                  /* handle the messages */
    {
        case WM_INITDIALOG:
        {
        }
         case WM_COMMAND:
        {
            error = 0;
            switch(LOWORD(wParam))
            {
            case 1:     // NONE MODE
                if(click!=1){
                    ShowWindow(c1,SW_HIDE);
                    ShowWindow(c2,SW_HIDE);
                    ShowWindow(c3,SW_HIDE);
                    ShowWindow(c4,SW_HIDE);
                    ShowWindow(c5,SW_HIDE);
                    ShowWindow(c6,SW_HIDE);
                    ShowWindow(c7,SW_HIDE);
                    ShowWindow(c8,SW_HIDE);
                    ShowWindow(c9,SW_HIDE);
                    ShowWindow(s1,SW_HIDE);
                    ShowWindow(s2,SW_HIDE);
                    ShowWindow(s3,SW_HIDE);
                    InvalidateRect(h_main,NULL,TRUE);
                }
                click = 1;
                closesocket(hServSock);
               break;
            case 2:     // SERVER MODE
                if(click!=2){
                    x=200;
                    y=80;
                    ShowWindow(c1,SW_HIDE);
                    ShowWindow(c2,SW_HIDE);
                    ShowWindow(c3,SW_HIDE);
                    ShowWindow(c4,SW_HIDE);
                    ShowWindow(c5,SW_HIDE);
                    ShowWindow(c6,SW_HIDE);
                    ShowWindow(c7,SW_HIDE);
                    ShowWindow(c8,SW_HIDE);
                    ShowWindow(c9,SW_HIDE);
                    InvalidateRect(h_main,NULL,TRUE);
                    s1 = CreateWindow("static","IP addr :",WS_CHILD|WS_VISIBLE,140,50,60,20,h_main,NULL,hInst,NULL);
                    s2 = CreateWindow("static",myip,WS_CHILD|WS_VISIBLE,200,50,100,20,h_main,(HMENU)5,hInst,NULL);
                    s3 = CreateWindow("static","MSG : ",WS_CHILD|WS_VISIBLE,140,80,50,20,h_main,NULL,hInst,NULL);

                    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0){ // Initialize Socket Library
                        MessageBox(h_main,"WSAStartup() error!!","ERROR",MB_OK);
                        error = 1;
                    }
                    hMutex = CreateMutex(NULL,FALSE,NULL);
                    if(hMutex==NULL){
                        MessageBox(h_main,"CreateMutex()error!!","ERROR",MB_OK);
                        printf("CreateMutex()error!");
                        error = 1;
                    }
                    hServSock = socket(PF_INET, SOCK_STREAM, 0); // Make Socket
                    if (hServSock == INVALID_SOCKET){
                        MessageBox(h_main,"socket() error!!","ERROR",MB_OK);
                        printf("socket() error");
                        error = 1;
                    }
                    memset(&servAddr, 0, sizeof(servAddr));
                    servAddr.sin_family = AF_INET;
                    servAddr.sin_addr.s_addr = htonl(INADDR_ANY);
                    servAddr.sin_port = htons(4000);

                    if (bind(hServSock, (SOCKADDR*)&servAddr, sizeof(servAddr)) == SOCKET_ERROR){ // Allocate <IP address & Port Number> to Socket
                        MessageBox(h_main,"bind() error!!","ERROR",MB_OK);
                        printf("bind() error");
                        error = 1;
                    }
                    if (listen(hServSock, 5) == SOCKET_ERROR){ // Made Socket -> Server Socket ( Using the function listen() )
                        MessageBox(h_main,"listen() error!!","ERROR",MB_OK);
                        printf("listen() error");
                        error = 1;
                    }
                    if(error==0){
                        printf(" SERVER START ");
                    }
                    _beginthread(OnAccept,0,(void*)h_main);
                }
                click = 2;
                break;

            case 3:     // CLIENT MODE
                if(click!=3){
                    ShowWindow(s1,SW_HIDE);
                    ShowWindow(s2,SW_HIDE);
                    ShowWindow(s3,SW_HIDE);
                    InvalidateRect(h_main,NULL,TRUE);
                    c1 = CreateWindow("static","dest IP",WS_CHILD|WS_VISIBLE|WS_BORDER|ES_AUTOHSCROLL,140,50,100,20,h_main,NULL,hInst,NULL);
                    c3 = CreateWindow("static","Port",WS_CHILD|WS_VISIBLE|WS_BORDER|ES_AUTOHSCROLL,140,80,100,20,h_main,NULL,hInst,NULL);
                    c5 = CreateWindow("static","Message",WS_CHILD|WS_VISIBLE|WS_BORDER|ES_AUTOHSCROLL,140,110,100,20,h_main,NULL,hInst,NULL);

                    c2 = CreateWindow("edit",c_addr,WS_CHILD|WS_VISIBLE|WS_BORDER|ES_AUTOHSCROLL,210,50,150,20,h_main,(HMENU)4,hInst,NULL);
                    c4 = CreateWindow("edit","4000",WS_CHILD|WS_VISIBLE|WS_BORDER,210,80,150,20,h_main,(HMENU)4,hInst,NULL);
                    c6 = CreateWindow("edit",NULL,WS_CHILD|WS_VISIBLE|WS_BORDER|ES_AUTOHSCROLL,210,110,150,20,h_main,(HMENU)4,hInst,NULL);

                    c7 = CreateWindow("button","SEND",WS_CHILD|WS_VISIBLE|BS_PUSHBUTTON,140,150,100,50,h_main,(HMENU)10,hInst,NULL);
                    c8 = CreateWindow("button","SEND per 1sec",WS_CHILD|WS_VISIBLE|BS_PUSHBUTTON,250,150,110,50,h_main,(HMENU)12,hInst,NULL);
                    c9 = CreateWindow("button","STOP SENDING",WS_CHILD|WS_VISIBLE|BS_PUSHBUTTON,250,200,110,50,h_main,(HMENU)13,hInst,NULL);
                    ShowWindow(c9,SW_HIDE);
                }
                click = 3;
                closesocket(hServSock);
                break;

            case 10:    // SEND button
                GetWindowText(c6,str,BUFSIZE);
                GetWindowText(c2,c_addr,IPSIZE);
                GetWindowText(c4,c_pnum,PORTSIZE);

                client(atoi(c_pnum),c_addr,str);

                if(error==0) MessageBox(h_main,"SEND!","MSG",MB_OK);
                closesocket(client_socket);
                break;

            case 11:    // QUIT button
                WSACleanup();
                PostQuitMessage(0);
                break;

            case 12:    // PER SEC button
                click = 3;
                GetWindowText(c6,str,BUFSIZE);
                GetWindowText(c2,c_addr,IPSIZE);
                GetWindowText(c4,c_pnum,PORTSIZE);
                 if(error==0){
                        if(MessageBox(h_main,"1초마다 전송하시겠습니까?","MSG",MB_YESNO)==IDYES){
                        _beginthread(persec,0,(void *)h_main);
                        ShowWindow(c9,SW_SHOW);
                        ShowWindow(c8,SW_HIDE);
                    }
                }
                break;

            case 13:    // STOP PER SEC button
                click = 0;
                ShowWindow(c9,SW_HIDE);
                ShowWindow(c8,SW_SHOW);
                break;

        }
        case WM_DESTROY:
            //PostQuitMessage (0);       /* send a WM_QUIT to the message queue */
            break;
        default:                      /* for messages that we don't deal with */
            return DefWindowProc (hwnd, message, wParam, lParam);
    }

    return 0;
}
}
